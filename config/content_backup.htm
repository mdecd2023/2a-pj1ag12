<h1>About</h1>
<p><strong>members:</strong></p>
<p>41023114 王樟皓 41023126 卓桓琮</p>
<p>倉儲:<span> <a href="https://github.com/mdecd2023/2a-pj1ag12">https://github.com/mdecd2023/2a-pj1ag12</a></span></p>
<p>網站:<span> <a href="https://mdecd2023.github.io/2a-pj1ag12">https://mdecd2023.github.io/2a-pj1ag12</a></span></p>
<h1>w3</h1>
<p><span>hw1 請各組寫一個程式判定 2a 哪一組已經完成網頁建置.</span></p>
<p><span> hw2 Tutorial1-CoppeliaSim 4.3.0 User Manual - CoppeliaSim 4.3.0 使用者手冊 </span><span role="gridcell"><a class="x1i10hfl xjbqb8w x6umtig x1b1mbwd xaqea5y xav7gou x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 xggy1nq x1a2a7pz xt0b8zv x1heor9g x1bvjpef" href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html?fbclid=IwAR2_4NZj894Af1a5p78_KQfokx4nNUzh0txWv_lf9c9VsPiOaQzjM4sGTgY" rel="nofollow" role="link" tabindex="-1" target="_blank">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a></span><span> 心得, 展示頁面說明各組員所完成項目, 說明該組的專案規劃</span></p>
<p></p>
<h3>hw1</h3>
<p><span></span></p>
<p><span>請各組寫一個程式判定 2a 哪一組已經完成網頁建置.</span></p>
<p>用Python的requests套件來進行網頁存取，並且查看網頁的回應狀態碼，判斷網頁是否存在。以下是一個可以判斷組別網頁建置狀態的Python程式：<br/>import requests</p>
<p>base_url = "https://github.com/NTUT-2A/"</p>
<p># 迭代21個組別<br/>for i in range(1, 22):<br/> # 組別網頁的URL<br/> url = base_url + f"2a-pj1ag{i}"</p>
<p># 建立 GET 請求<br/> response = requests.get(url)</p>
<p># 判斷回應狀態碼是否為200<br/> if response.status_code == 200:<br/> print(f"2a-pj1ag{i} 已經完成網頁建置")<br/> else:<br/> print(f"2a-pj1ag{i} 尚未完成網頁建置")<br/>程式會先以for迴圈迭代21個組別，然後使用requests.get()函式發送GET請求去查詢每一個組別的網頁狀態。如果回應狀態碼為200，代表網頁存在，組別已完成網頁建置；反之，如果回應狀態碼不是200，代表網頁不存在，組別尚未完成網頁建置。</p>
<p></p>
<p></p>
<p></p>
<h2>hw2</h2>
<p><span>Tutorial1-CoppeliaSim 4.3.0 User Manual - CoppeliaSim 4.3.0 使用者手冊 </span><span role="gridcell"><a class="x1i10hfl xjbqb8w x6umtig x1b1mbwd xaqea5y xav7gou x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 xggy1nq x1a2a7pz xt0b8zv x1heor9g x1bvjpef" href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html?fbclid=IwAR0sGaqLQQxMJchCAIBdEn9ZoHwqu0QtYQtPjsfihm6VJu0yl3ezwg-Gq48" rel="nofollow" role="link" tabindex="-1" target="_blank">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a></span><span> </span></p>
<p><span>心得, 展示頁面說明各組員所完成項目, 說明該組的專案規劃.</span><br/><span></span></p>
<h1>w4</h1>
<p><strong>BubbleRub tutorial 製作結果與心得 presentation (以 Web-based 方式發表):</strong></p>
<p>製作結果:完成<br/>心得:在做的過程中，可以學習到如何加入物體並設定參數，過程中學習英文及發現問題並解決問題的能力</p>
<p><strong>Tutorial 議題: Why? How? What? (主題為何? 如何協同? 完成內容展示)</strong></p>
<p>Why?</p>
<p>這個網站的主題是學習機器人運動和避障演算法的。讓我們可以學習如何設計和編程一個能夠避開障礙物的機器人，並且通過互動式學習環境來實踐和鞏固所學的知識。</p>
<p>How?<br/>在協同的過程上，是由組長分配該完成的部分，由組長操作球體製作，以及組員製作wink、PPT報告，但在只有兩人的隊伍中，還是會有一個人無法解決的部分，所以還是必須兩方<br/>都參與到對方所該完成的部分，畢竟兩個人的目的就是為了更好完成一項任務才叫合作，</p>
<p>What?</p>
<p>這個網站提供了一個學習機器人運動和避障演算法的資源，其主要特點包括：</p>
<p>1.學習機器人模擬器和程式碼編輯器，讓我們可以進行實踐和練習</p>
<p>2.練習問題，可以讓我們更進一步鞏固所學的知識和技能。</p>
<h2>w4-note</h2>
<p><strong>1.在 CoppeliaSim 中, scene 與 model 有何不同?</strong></p>
<p>在CoppeliaSim中，場景（scene）和模型（model）是兩個不同的概念。場景是指由多個模型組成的環境或場景，而模型是指一個單獨的物件或組件。可以將模型添加到場景中，並對它們進行組合和控制。</p>
<p><strong>2.在 CoppeliaSim scene 中, 何謂 clean model?</strong></p>
<p><span>在CoppeliaSim中，clean model是指一個不包含任何不必要物件或組件的模型。這些物件或組件可能會干擾模型的性能或導致不必要的計算開銷。因此，建議在創建模型時始終保持模型的乾淨，只包含必要的物件或組件。</span></p>
<p><strong>3.如何在 CoppeliaSim scene 中, 如何利用 Lua 以及 Python 建立 primitive type object, 並利用程式設定物件位置?</strong></p>
<p><span>要在CoppeliaSim場景中建立基本類型物件並設定它們的位置，可以使用Lua或Python腳本。首先，需要建立物件，然後使用setObjectPosition（）函數將它們放置在所需的位置。例如，以下是在Lua中建立一個圓柱體並將其放置在（1,2,3）的位置的示例代碼：</span></p>
<p>handle=sim.createPureShape(1,16,{0.1,0.1,0.2},0.1)<br/>sim.setObjectPosition(handle,-1,{1,2,3})</p>
<p><strong>4.CoppeliaSim .ttt 檔案格式與 .simscene.xml 檔案格式有何不同?</strong></p>
<p>在CoppeliaSim中，.ttt文件是二進制文件格式，用於保存整個場景，包括所有物件、組件、腳本等。而.simscene.xml文件是XML文件格式，用於保存場景的部分內容，如物件、組件和它們的位置等。這使得可以更容易地編輯和版本控制場景的部分內容，而不必保存整個場景。</p>
<h1>tutorial1</h1>
<p>bubboleRob ppt報告:<a href="/downloads/Bubblerob.pptx">BubbleRob.pptx</a>   <a href="https://docs.google.com/presentation/d/1yDeSqAenM2wTI2ubLBoeaWY4cIU1Cmxw/edit?usp=share_link&amp;ouid=113096178602911505348&amp;rtpof=true&amp;sd=true" title="PPT Report">Google硬碟 PPT Report</a> </p>
<p>完成模擬影片:<a href="https://youtu.be/iL5Z9Yr515I">https://youtu.be/iL5Z9Yr515I</a>  </p>
<p>完成檔:<a href="/downloads/bubbRob.ttt">bubbleRob.ttt</a></p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial-finish video.mp4" type="video/mp4"/></video></div>
<h2>製作過程</h2>
<p><strong>stage1</strong></p>
<p><span><br/>模擬兩球相撞</span></p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st1.mp4" type="video/mp4"/></video></div>
<p><span>模擬兩球相撞</span></p>
<p><a href="https://youtu.be/WbUQO7bAOyA">https://youtu.be/WbUQO7bAOyA</a></p>
<p><strong></strong></p>
<p><strong>stage2</strong></p>
<p><br/>新增bubbleRob並設定</p>
<p>補充說明:0.33秒時 要先設定<span style="color: #000000;"><strong>Position</strong><em><strong> </strong></em>Z軸為0.12</span></p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st2.mp4" type="video/mp4"/></video></div>
<p><strong>stage3</strong></p>
<p>幫bubbleRob加上感測器</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st3.mp4" type="video/mp4"/></video></div>
<p><strong>stage4</strong></p>
<p><br/>新增輪子 左輪及右輪</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st4.mp4" type="video/mp4"/></video></div>
<p><br/><strong>atage5</strong></p>
<p><br/>在輪子上加上馬達</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st5.mp4" type="video/mp4"/></video></div>
<p><br/><strong>stage6</strong></p>
<p><br/>增加小滑輪</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st6.mp4" type="video/mp4"/></video></div>
<p><strong>stage7</strong></p>
<p><br/>增加graph和障礙物</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st7.mp4" type="video/mp4"/></video></div>
<p><br/><strong>stage8</strong></p>
<p><br/>設定bubblerob modle模型建構</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st8.mp4" type="video/mp4"/></video></div>
<p><br/><strong>stage9</strong></p>
<p><br/>新增vision sensor</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st9.mp4" type="video/mp4"/></video></div>
<p><br/><strong>stage10</strong></p>
<p><br/>加入程式碼</p>
<script>
var winkVideoData_41023126 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_41023126" height="630" muted="true" width="1008">
<source src="/downloads\w3-BubbleRob tutorial\w3-st10.mp4" type="video/mp4"/></video></div>
<p><br/><strong>FINAL</strong></p>
<p>調整障礙物位置 不要讓車子跑出去 就完成了</p>
<h2>程式</h2>
<p></p>
<p><strong>bubbleRob 程式</strong></p>
<p>function sysCall_init()<br/> <br/> -- This is executed exactly once, the first time this script is executed<br/> bubbleRobBase=sim.getObject('.') -- this is bubbleRob's handle<br/> leftMotor=sim.getObject("./leftMotor") -- Handle of the left motor<br/> rightMotor=sim.getObject("./rightMotor") -- Handle of the right motor<br/> noseSensor=sim.getObject("./sensingNose") -- Handle of the proximity sensor<br/> minMaxSpeed={50*math.pi/180,300*math.pi/180} -- Min and max speeds for each motor<br/> backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode<br/> robotCollection=sim.createCollection(0)<br/> sim.addItemToCollection(robotCollection,sim.handle_tree,bubbleRobBase,0)<br/> distanceSegment=sim.addDrawingObject(sim.drawing_lines,4,0,-1,1,{0,1,0})<br/> robotTrace=sim.addDrawingObject(sim.drawing_linestrip+sim.drawing_cyclic,2,0,-1,200,{1,1,0},nil,nil,{1,1,0})<br/> graph=sim.getObject('./graph')<br/> distStream=sim.addGraphStream(graph,'bubbleRob clearance','m',0,{1,0,0})<br/> -- Create the custom UI:<br/> xml = '&lt;ui title="'..sim.getObjectAlias(bubbleRobBase,1)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[<br/> &lt;hslider minimum="0" maximum="100" on-change="speedChange_callback" id="1"/&gt;<br/> &lt;label text="" style="* {margin-left: 300px;}"/&gt;<br/> &lt;/ui&gt;<br/> ]]<br/> ui=simUI.create(xml)<br/> speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5<br/> simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))<br/> <br/>end</p>
<p>function sysCall_sensing()<br/> local result,distData=sim.checkDistance(robotCollection,sim.handle_all)<br/> if result&gt;0 then<br/> sim.addDrawingObjectItem(distanceSegment,nil)<br/> sim.addDrawingObjectItem(distanceSegment,distData)<br/> sim.setGraphStreamValue(graph,distStream,distData[7])<br/> end<br/> local p=sim.getObjectPosition(bubbleRobBase,sim.handle_world)<br/> sim.addDrawingObjectItem(robotTrace,p)<br/>end</p>
<p>function speedChange_callback(ui,id,newVal)<br/> speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100<br/>end</p>
<p>function sysCall_actuation() <br/> result=sim.readProximitySensor(noseSensor) -- Read the proximity sensor<br/> -- If we detected something, we set the backward mode:<br/> if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end</p>
<p>if (backUntilTime&lt;sim.getSimulationTime()) then<br/> -- When in forward mode, we simply move forward at the desired speed<br/> sim.setJointTargetVelocity(leftMotor,speed)<br/> sim.setJointTargetVelocity(rightMotor,speed)<br/> else<br/> -- When in backward mode, we simply backup in a curve at reduced speed<br/> sim.setJointTargetVelocity(leftMotor,-speed/2)<br/> sim.setJointTargetVelocity(rightMotor,-speed/8)<br/> end<br/>end</p>
<p>function sysCall_cleanup() <br/> simUI.destroy(ui)<br/>end</p>
<p><strong>Vision senser 程式</strong></p>
<p>function sysCall_vision(inData)<br/> simVision.sensorImgToWorkImg(inData.handle)<br/> simVision.edgeDetectionOnWorkImg(inData.handle,0.2)<br/> simVision.workImgToSensorImg(inData.handle)<br/>end</p>
<p>function sysCall_init()<br/>end</p>
<h2>中文版程式</h2>
<p>-- 定義函數：當腳本被執行時，僅執行一次<br/>function sysCall_init()</p>
<p>-- 獲取 bubbleRobBase 的句柄<br/>bubbleRobBase = sim.getObject('.')</p>
<p>-- 獲取左右電機的句柄<br/>leftMotor = sim.getObject("./leftMotor") <br/>rightMotor = sim.getObject("./rightMotor")</p>
<p>-- 獲取接近感測器的句柄<br/>noseSensor = sim.getObject("./sensingNose")</p>
<p>-- 每個電機的最小和最大速度<br/>minMaxSpeed = {50*math.pi/180, 300*math.pi/180}</p>
<p>-- 告訴程式 bubbleRob 當前是前進還是後退<br/>backUntilTime = -1</p>
<p>-- 建立機器人集合<br/>robotCollection = sim.createCollection(0)<br/>sim.addItemToCollection(robotCollection, sim.handle_tree, bubbleRobBase, 0)</p>
<p>-- 建立距離線段的視覺化物件<br/>distanceSegment = sim.addDrawingObject(sim.drawing_lines, 4, 0, -1, 1, {0,1,0})</p>
<p>-- 建立機器人軌跡的視覺化物件<br/>robotTrace = sim.addDrawingObject(sim.drawing_linestrip+sim.drawing_cyclic, 2, 0, -1, 200, {1,1,0}, nil, nil, {1,1,0})</p>
<p>-- 取得圖形物件<br/>graph = sim.getObject('./graph')</p>
<p>-- 建立一個名為 bubbleRob clearance 的流並將其添加到圖形物件中<br/>distStream = sim.addGraphStream(graph, 'bubbleRob clearance', 'm', 0, {1,0,0})</p>
<p>-- 建立自訂 UI 介面<br/>xml = '&lt;ui title="'..sim.getObjectAlias(bubbleRobBase,1)..' speed" closeable="false" resizeable="false" activate="false"&gt;'.. [[<br/> &lt;hslider minimum="0" maximum="100" on-change="speedChange_callback" id="1"/&gt;<br/> &lt;label text="" style="* {margin-left: 300px;}"/&gt;<br/>&lt;/ui&gt;<br/>]]</p>
<p>ui = simUI.create(xml)</p>
<p>-- 計算速度並將其設置為滑塊的初始值<br/>speed = (minMaxSpeed[1]+minMaxSpeed[2])*0.5<br/>simUI.setSliderValue(ui, 1, 100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))</p>
<p>end</p>
<p>-- 定義函數：當感測器更新時執行的操作<br/>function sysCall_sensing()<br/>-- 檢查集合中所有物件之間的距離<br/>local result, distData = sim.checkDistance(robotCollection, sim.handle_all)</p>
<p>-- 如果有任何物體檢測到，則將檢測到的距離繪製為綠色線段<br/>if result &gt; 0 then<br/> sim.addDrawingObjectItem(distanceSegment, nil)<br/> sim.addDrawingObjectItem(distanceSegment, distData)<br/> sim.setGraphStreamValue(graph, distStream, distData[7])<br/>end</p>
<p>-- 獲取機器人當前位置，並將其添加到軌跡可視化物件中<br/>local p = sim.getObjectPosition(bubbleRobBase, sim.handle_world)<br/>sim.addDrawingObjectItem(robotTrace, p)</p>
<p><span>end</span></p>
<h2>lua轉成pythont程式</h2>
<p>import sim</p>
<p>def speedChange_callback(ui, id, newVal):<br/> global speed, minMaxSpeed<br/> speed = minMaxSpeed[1] + (minMaxSpeed[2] - minMaxSpeed[1]) * newVal / 100</p>
<p>def sysCall_init():<br/> global bubbleRobBase, leftMotor, rightMotor, noseSensor, minMaxSpeed, backUntilTime<br/> global robotCollection, distanceSegment, robotTrace, graph, distStream, ui, speed</p>
<p># This is executed exactly once, the first time this script is executed<br/> bubbleRobBase = sim.getObjectHandle('.')<br/> leftMotor = sim.getObjectHandle('./leftMotor') # Handle of the left motor<br/> rightMotor = sim.getObjectHandle('./rightMotor') # Handle of the right motor<br/> noseSensor = sim.getObjectHandle('./sensingNose') # Handle of the proximity sensor<br/> minMaxSpeed = [50 * math.pi / 180, 300 * math.pi / 180] # Min and max speeds for each motor<br/> backUntilTime = -1 # Tells whether bubbleRob is in forward or backward mode<br/> robotCollection = sim.createCollection(0)<br/> sim.addItemToCollection(robotCollection, sim.handle_tree, bubbleRobBase, 0)<br/> distanceSegment = sim.addDrawingObject(sim.drawing_lines, 4, 0, -1, 1, [0, 1, 0])<br/> robotTrace = sim.addDrawingObject(sim.drawing_linestrip + sim.drawing_cyclic, 2, 0, -1, 200, [1, 1, 0])<br/> graph = sim.getObject('./graph')<br/> distStream = sim.addGraphStream(graph, 'bubbleRob clearance', 'm', 0, [1, 0, 0])</p>
<p># Create the custom UI<br/> xml = '''&lt;ui title="{} speed" closeable="false" resizeable="false" activate="false"&gt;<br/> &lt;hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/&gt;<br/> &lt;label text="" style="* {{margin-left: 300px;}}"/&gt;<br/> &lt;/ui&gt;'''.format(sim.getObjectAlias(bubbleRobBase, 1))<br/> ui = simUI.create(xml)<br/> speed = (minMaxSpeed[1] + minMaxSpeed[2]) * 0.5<br/> simUI.setSliderValue(ui, 1, 100 * (speed - minMaxSpeed[1]) / (minMaxSpeed[2] - minMaxSpeed[1]))</p>
<p>def sysCall_sensing():<br/> global robotCollection, distanceSegment, robotTrace, graph, distStream<br/> result, distData = sim.checkDistance(robotCollection, sim.handle_all)<br/> if result &gt; 0:<br/> sim.addDrawingObjectItem(distanceSegment, None)<br/> sim.addDrawingObjectItem(distanceSegment, distData)<br/> sim.setGraphStreamValue(graph, distStream, distData[7])<br/> p = sim.getObjectPosition(bubbleRobBase, -1)<br/> sim.addDrawingObjectItem(robotTrace, p)</p>
<p>def sysCall_actuation():<br/> global speed, backUntilTime<br/> result = sim.readProximitySensor(noseSensor) # Read the proximity sensor<br/> # If we detected something, we set the backward mode:<br/> if result &gt; 0:<br/> backUntilTime = sim.getSimulationTime() + 4</p>
<p>if backUntilTime &lt; sim.getSimulationTime():<br/> # When in forward mode, we simply move forward at the desired speed<br/> sim.setJointTargetVelocity(leftMotor, speed)<br/> sim.setJoint</p>
<p></p>
<h1>目前進度</h1>
<p>1.網頁已經架設完成</p>
<p>2.完成tutorial1-bubbleRob<span>的作業</span></p>
<p><span>3.專案規劃正在規劃中</span></p>
<p></p>
<h1>專案規劃</h1>
<p><span>開發一款能在 web-based CoppeliaSim 場景中雙方或多方 (human or computer) 對玩的遊戲 (game) 產品</span></p>
<p><span>目前的想法:</span></p>
<p><span>疊方塊:在時間限制內疊更高的方塊堆</span></p>
<p>在上方架設丟方塊的裝置</p>
<p>在底下放一個接方塊的車子</p>
<p>在有限的時間內誰疊的方塊越高 誰就贏</p>
<h1>心得</h1>
<p><br/>41023126心得:<br/>這學期的課程中有很多的要學習的地方</p>
<p>1.建立倉儲，架設網站</p>
<p>2.在過程中學習英文</p>
<p>3.認識程式語言(python)</p>
<p>4.蒐集資料，善用工具</p>
<p>5.如何分工，分配工作</p>
<p>6.解決問題</p>
<p>遇到的問題有</p>
<p>1.不同人更新倉儲時，會發生衝突</p>
<p>解決方法--&gt;利用git pull 指令將遠端的資料拉下來合併</p>
<p>製作bubbleRob的過程中發現英文真的很重要，因為有些部分翻譯過會怪怪的，所以要重複閱讀幾次，才能知道是甚麼意思。</p>
<p>41023114心得:<br/>對於這個bubblerob，我認為他的建構對我們而言算是挺有難度的，由於這次的模型包含的屬性眾多，因此整理重點時，有某些細項需要重複閱讀和翻譯幾次才能理解，且由於它屬於感知機器人，因此還得幫它加入腳本語言，且操作上對於不同空間的黏貼組合，我們仍需要多參閱其他範本，畢竟有時候按圖施工也不一定保證成功。</p>
<h1>Progress</h1>
<p>w1:說明課程和評分標準</p>
<p>w2:二二八連假</p>
<p>w3-monday:講解如何建立靜態網站</p>
<p>w3-thusday:補課</p>
<p>w4:課堂報告</p>
<p>分工進度</p>
<p>41023114 建立靜態網站</p>
<p>41023126 更新網頁內容</p>
<h1>note</h1>
<h2>程式note</h2>
<p>python 相關資料</p>
<p>參考來源:<a href="https://steam.oxxostudio.tw/category/python/index.html">Python 教學 | STEAM 教育學習網 (oxxostudio.tw)</a></p>
<h3>Requests 函式庫</h3>
<p><span>requests 函式庫 ( 模組 ) 是相當流行的 Python 外部函式庫，透過 requests 能夠輕鬆抓取網頁的資料，這篇教學會介紹 requests 函式庫的基本用法。</span></p>
<p><a href="https://steam.oxxostudio.tw/category/python/spider/requests.html">https://steam.oxxostudio.tw/category/python/spider/requests.html</a></p>
<h3>重複迴圈 ( for、while )</h3>
<p>「for 迴圈」的使用的方法為「for 變數 in 可迭代的物件:」，執行之後，for 迴圈會依序將可以迭代的物件取出，賦值給指定的變數 。</p>
<p><a href="https://steam.oxxostudio.tw/category/python/basic/loop.html" title="參考資料">https://steam.oxxostudio.tw/category/python/basic/loop.html</a></p>
<h3>Lua程式</h3>
<p>以下是一些特徵：</p>
<p>檔的擴展名通常是.lua<br/>程式的函數定義使用關鍵字function，參數不用括號<br/>變數名稱不需要類型聲明<br/>語句結尾不需要分號<br/>註釋以雙橫線（--）開始，單行或多行註釋都可以<br/>UI的定義使用的是Lua的字串處理功能<br/>以上特徵都是Lua程序的特點。 因此，這段程式可以被確認為是Lua編寫的。</p>
<h2>補充note</h2>
<h3>專案規劃定義</h3>
<p>專案規劃是一個系統性的過程，它包括了訂定目標、確定所需的資源、分配工作和責任、確定時間表、制定預算、風險評估和解決方案等。以下是一個簡單的專案規劃步驟：</p>
<ol>
<li>
<p>確定目標：確定您要達成的目標是什麼。這可能包括確定任務、時程表、預算、資源、風險等。</p>
</li>
<li>
<p>分析問題：分析問題，確定這個專案所需要的資源和限制，包括人力、財務、時間和技術方面的問題。</p>
</li>
<li>
<p>制定計畫：制定一個計畫，詳細列出實現目標所需要的步驟，確定哪些工作需要完成以及誰將負責完成這些工作。</p>
</li>
<li>
<p>資源分配：確定需要哪些資源以及如何分配這些資源。這可能包括人員、技術和設備等。</p>
</li>
<li>
<p>建立時間表：建立一個時間表，確定各項工作和活動的時間表和完成期限。</p>
</li>
<li>
<p>制定預算：制定一個預算，確定需要的財務資源和預算限制。</p>
</li>
<li>
<p>風險評估：評估可能影響項目成功的風險，確定應對策略和解決方案。</p>
</li>
<li>
<p>完成計畫：編制完整的計畫，包括上述所有步驟的詳細細節和時間表。</p>
</li>
</ol>
<p>經過上述步驟，專案規劃就完成了。一旦您完成了這些步驟，您就可以開始執行計畫，確保您的專案能夠順利進行並達成預期的目標。</p>
<p><span></span></p>